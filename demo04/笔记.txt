Express 中使用 cookie

cookie 简介

cookie 是存储于访问者的计算机中的变量，
可以让我们用同一个浏览器访问同一个域名的时候共享数据。

HTTP 是无状态协议。简单地说，当你浏览一个页面，然后转到同一个网站的另一个页面，
服务器无法认识到这是同一个浏览器在访问同一个网站，每一次的访问，都是没任何关系的。

cookie 是一个简单到爆的想法：当访问一个页面的时候，服务器在下行 http 报文中，
命令浏览器存储一个字符串；浏览器再访问同一个域的时候，将把这个字符串携带到上行
http 请求中。第一次访问一个服务器，不可能携带 cookie。必须是服务器得到这次请求，
再下行响应报头中，携带 cookie 信息，此后每一次浏览器往这个服务器发出的请求，
都会携带这个 cookie。

cookie 使用
Express 中要使用 cookie 的话，我们需要使用 cookie-parser 模块来实现
1、安装
cnpm i cookie-parser --save
2、引入
const cookieParser = require("cookie-parser");
3、设置中间件
app.use(cookieParser());
4、设置cookie
res.cookie("name", 'zhangsan', {maxAge: 900000, httpOnly:true});

cookie 属性
1、maxAge： 
最大失效时间（传入毫秒），即可以设置 cookie 有效期

2、signed：
表示是否签名（加密） cookie, 设为 true 会对这个 cookie 签名，
这样就需要用res.signedCookies 访问它,前提需要设置上面中间件app.use传参 。
未签名则用 res.cookies 访问

3、expires：
过期时间（秒），在设置的某个时间点后该 Cookie 就会失效。

4、httpOnly：
默认为false，建议设置为true，
客户端将无法通过document.cookie读取到 COOKIE 信息，可防止 XSS 攻击

5、path：
表示 cookie 影响到的路由，如 path=/。
如果路径不能匹配时，浏览器则不发送这个 Cookie

6、domain：
域名。设置子域名（二级域名）是否可以访问cookie。 
例：domain:'.主域名' name=value：键值对，可以设置要保存的 Key/Value，
注意这里的 name 不能和其他属性项的名字一样

7、secure：
当 secure 值为 true 时， cookie 在 HTTP 中是无效，在 HTTPS 中才有效
    
8、encode：
9、sameSite：



/*
   * cookie 使用加密步骤
   * 
   * 1、配置 cookie-parser 中间件的时候需要传入加密的参数
   *    app.use(cookieParser("Destiny"));
   * 2、设置 cookie 的时候 设置 signed：ture
   *    res.cookie("username", "张三", {maxAge: 1000*60*60, signed: true})
   * 3、获取加密 cookie 的时候要使用 signedCookie
   *
*/ 












